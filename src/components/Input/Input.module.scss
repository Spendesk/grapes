@use '../../theme/placeholders';

.inputContainer {
  @extend %input-layout;
  display: inline-flex;
  position: relative;
  box-sizing: border-box;
  padding: 0;

  &:hover {
    @extend %input-hover;
  }

  &:not(.invalidInputContainer):focus-within {
    @extend %input-focus;
  }

  &.invalidInputContainer {
    @extend %input-invalid;

    &:focus-within {
      @extend %input-invalid-focus;
    }
  }
}

.inputContainer:has(.input:disabled) {
  @extend %input-disabled;
}

.inputContainer:has(.input:read-only) {
  background-color: var(--color-background-primary-readonly);
}

.inputContainer[data-variant='magicGradient'] {
  border: 1px solid transparent;
  background: var(--color-gradient-magic);
}

.inputContainer .leftAddon > button,
.inputContainer .rightAddon > button {
  height: calc(var(--unit-40) - 6px);
  border-radius: 6px;
}

.inputContainer .leftAddon > button {
  margin-left: 2px;
}

.inputContainer .rightAddon > button {
  margin-right: 2px;
}

.parentFitInputContainer {
  width: 100%;
}

.input {
  @extend %input-text;
  height: 100%;
  box-sizing: border-box;
  flex: 1 1 auto;
  min-width: 0;
  padding: var(--unit-8);
  border: none;
  background: none;

  &:focus {
    outline: none;
  }
}

.leftAddon,
.rightAddon {
  height: 100%;
  flex: 0 0 auto;
  display: flex;
  align-items: center;
  justify-content: center;
}
